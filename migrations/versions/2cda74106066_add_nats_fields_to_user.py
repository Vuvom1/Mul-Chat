"""add_nats_fields_to_user

Revision ID: 2cda74106066
Revises: dd95ebd50e6b
Create Date: 2025-05-29 15:19:20.828629

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2cda74106066'
down_revision: Union[str, None] = 'dd95ebd50e6b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Use PostgreSQL-specific SQL for the columns with IF NOT EXISTS
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    
    # Check if we're using PostgreSQL dialect
    if connection.dialect.name == 'postgresql':
        # Check if the column already exists
        columns = [col['name'] for col in inspector.get_columns('users')]
        
        # Add columns only if they don't exist
        if 'nats_seed_hash' not in columns:
            op.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS nats_seed_hash VARCHAR(100)")
        if 'nats_account_id' not in columns:
            op.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS nats_account_id INTEGER")
        if 'nats_expires_at' not in columns:
            op.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS nats_expires_at TIMESTAMP")
        if 'nats_expired_at' not in columns:
            op.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS nats_expired_at TIMESTAMP")
        
        # Add foreign key only if it doesn't exist (needs extra care)
        try:
            op.create_foreign_key(None, 'users', 'nats_accounts', ['nats_account_id'], ['id'])
        except Exception as e:
            print(f"Note: Foreign key might already exist or tables not ready: {e}")
    else:
        # SQLite or other database
        try:
            op.add_column('users', sa.Column('nats_seed_hash', sa.String(length=100), nullable=True))
            op.add_column('users', sa.Column('nats_account_id', sa.Integer(), nullable=True))
            op.add_column('users', sa.Column('nats_expires_at', sa.DateTime(), nullable=True))
            op.add_column('users', sa.Column('nats_expired_at', sa.DateTime(), nullable=True))
            op.create_foreign_key(None, 'users', 'nats_accounts', ['nats_account_id'], ['id'])
        except Exception as e:
            print(f"Note: Some columns might already exist: {e}")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_column('users', 'nats_expired_at')
    op.drop_column('users', 'nats_expires_at')
    op.drop_column('users', 'nats_account_id')
    op.drop_column('users', 'nats_seed_hash')
    # ### end Alembic commands ###
